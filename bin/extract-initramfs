#!/bin/bash


# Name: compress-initramfs
# Author: Ruulian
# Version: v1.0
# Github page: https://github.com/Ruulian/initramfs-toolkit


INPUT_FILE=""
OUTPUT_DEFAULT="initrd-root"
OVERWRITE=false

OUTPUT_DIR=$OUTPUT_DEFAULT

print_help() {
    echo "Usage: $0 initrd/initramfs [-o output_directory] [-f]"
    echo "Options:"
    echo "  -o : Specify the output directory (default: '$OUTPUT_DEFAULT')"
    echo "  -f : Force creation of output (overwritten if already existing)"
    echo "  -h : Print this help message"
}

log_error()
{
    echo "Error: $1"
}


# Parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -o )
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -f )
            OVERWRITE=true
            shift
            ;;
        -h )
            print_help
            exit 0
            ;;
        * )
            INPUT_FILE="$1"
            shift
            ;;
    esac
done

if [ -z "$INPUT_FILE" ]; then
    log_error "No such file or directory $INPUT_FILE"
    exit 1
fi

if [ -d "$OUTPUT_DIR" ] && [ $OVERWRITE == false ]; then
    log_error "Output directory '$OUTPUT_DIR' already exists (specify -f to overwrite)"
    exit
else 
    if [ -d "$OUTPUT_DIR" ]; then
        rm -r "$OUTPUT_DIR"
    fi
fi

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

declare -A exts

extract_lzop()
{
    SCRIPT_NAME=$(basename "$1")
    COPY="bf072e_$SCRIPT_NAME"

    cp "$1" "$COPY"

    lzop -d "$COPY"
    
    CREATED_FILE=$(echo $COPY | sed 's/\.[^.]*$//')

    cat $CREATED_FILE

    rm $CREATED_FILE
    rm $COPY
}

exts["gzip"]="zcat"
exts["bzip2"]="bzcat"
exts["LZ4"]="lz4cat"
exts["LZMA"]="lzcat"
exts["lzop"]="extract_lzop"
exts["XZ"]="xzcat"
exts["Zstandard"]="zstdcat"
exts["cpio"]="cat"

INITRAMFS="$(realpath $INPUT_FILE)"
FILE_TYPE=$(cat "$INITRAMFS" | file -)
TMP_EXTRACTED="bf072e_extracted.cpio"

RES=$(
        (
        mkdir -p "$OUTPUT_DIR" &&
        cd "$OUTPUT_DIR" &&
        for key in "${!exts[@]}"; do
            if [[ $FILE_TYPE == *" $key "* ]]; then
                eval "${exts[$key]} $INITRAMFS > $TMP_EXTRACTED"
                break
            fi
        done &&
        (while cpio --quiet -id ; do :; done) < "$TMP_EXTRACTED" &&
        rm "$TMP_EXTRACTED"
        ) 2>&1
    )

if [ ! "$RES" == "cpio: premature end of archive" ]; then
    log_error "$RES"
fi